install.packages(ggeffects)
install.packages("ggeffects")
quarto::quarto_version()
library(tidyverse)
options(scipen = 999) # this stops numbers appearing as scientific notation
d_raw <- read_csv("data/Week_6/PSYC121_survey_data.csv")
setwd("D:/Repos/Research/year1/PSYC121")
d_raw <- read_csv("data/Week_6/PSYC121_survey_data.csv")
d <-
d_raw %>%
select("sibling_order" = Q6,
"home_location" = Q7,
"home_location_in_UK" = Q8,
"attention_check" = Q54,
"salary_estimate" = Q13) %>%
dplyr::slice(3:n()) %>%
mutate(sibling_order = case_when(str_detect(sibling_order, "oldest") ~ "oldest",
str_detect(sibling_order, "middle") ~ "middle",
str_detect(sibling_order, "youngest") ~ "youngest",
str_detect(sibling_order, "only") ~ "only"),
home_location_in_UK = case_when(str_detect(home_location_in_UK, "North West") ~ "NW",
str_detect(home_location_in_UK, "North East") ~ "NE",
str_detect(home_location_in_UK, "South West") ~ "SW",
str_detect(home_location_in_UK, "South East") ~ "SE",
str_detect(home_location_in_UK, "Midlands") ~ "Midlands",
str_detect(home_location_in_UK, "Wales") ~ "Wales"),
attention_check = case_when(str_detect(attention_check, "strongly agree") ~ "pass",
.default = "fail")) %>%
mutate(salary_estimate = as.numeric(salary_estimate)) %>%
drop_na(salary_estimate)  %>%
write_csv("data/Week_7/salary_data_wk7.csv")
d_f <-
d %>%
filter(salary_estimate > 10000)
d_f <-
d_f %>%
filter(salary_estimate < 60000)
#| eval: false
#| include: false
mean(d_f$salary_estimate)
sd(d_f$salary_estimate)
t.test(d_f$salary_estimate, mu = 34963)
d_f %>%
filter(home_location_in_UK == "NE")
d_f %>%
filter(home_location_in_UK == "SE" & sibling_order == "only")
d_f %>%
filter(home_location_in_UK == "SE" & sibling_order == "oldest")
d_f %>%
filter(attention_check == "fail")
d_f %>%
filter(attention_check == "pass" & home_location == "UK" & sibling_order == "youngest")
d_f %>%
filter(home_location_in_UK != "NW")
d_f %>%
filter(home_location_in_UK == "SE" | home_location_in_UK == "SW")
update.packages(ask = FALSE, checkBuilt = TRUE)
library(xfun)
detach("fastmap")
?detach
library?
?library
detach(fastmap)
library(fastmap)
detach("package:fastmap", unload = TRUE)
library(shiny)
detach("package:shiny", unload = TRUE)
library(learnr)
detach("package:learnr", unload = TRUE)
detach("package:shiny", unload = TRUE)
detach("package:fastmap", unload = TRUE)
install.packages("fastmap")
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("checkmate")
install.packages("cli")
install.packages("PKI")
setwd("D:/OneDrive - Lancaster University/Desktop PC/Teaching - Admin/PSYC121/Week 7")
setwd("D:/OneDrive - Lancaster University/Desktop PC/Teaching - Admin/PSYC121/Week 6")
library(tidyverse)
options(scipen = 999) # this stops numbers appearing as scientific notation
d_raw <- read_csv("data/Week_6/PSYC121_survey_data.csv")
setwd("C:/Repos/Research/year1/PSYC121")
library(tidyverse)
options(scipen = 999) # this stops numbers appearing as scientific notation
d_raw <- read_csv("data/Week_6/PSYC121_survey_data.csv")
d <-
d_raw %>%
select("sibling_order" = Q6,
"home_location" = Q7,
"home_location_in_UK" = Q8,
"attention_check" = Q54,
"salary_estimate" = Q13) %>%
dplyr::slice(3:n()) %>%
mutate(sibling_order = case_when(str_detect(sibling_order, "oldest") ~ "oldest",
str_detect(sibling_order, "middle") ~ "middle",
str_detect(sibling_order, "youngest") ~ "youngest",
str_detect(sibling_order, "only") ~ "only"),
home_location_in_UK = case_when(str_detect(home_location_in_UK, "North West") ~ "NW",
str_detect(home_location_in_UK, "North East") ~ "NE",
str_detect(home_location_in_UK, "South West") ~ "SW",
str_detect(home_location_in_UK, "South East") ~ "SE",
str_detect(home_location_in_UK, "Midlands") ~ "Midlands",
str_detect(home_location_in_UK, "Wales") ~ "Wales"),
attention_check = case_when(str_detect(attention_check, "strongly agree") ~ "pass",
.default = "fail")) %>%
mutate(salary_estimate = as.numeric(salary_estimate)) %>%
drop_na(salary_estimate)  %>%
write_csv("data/Week_7/salary_data_wk7.csv")
d %>%
ggplot(aes(salary_estimate)) +
geom_histogram(bins = 3)
#| eval: false
#| include: false
d_f <-
d %>%
filter(salary_estimate > 10000)
d_f <-
d_f %>%
filter(salary_estimate < 60000)
?t.test
library(tidyverse)
d_raw <- read_csv("data/Week_6/PSYC121_survey_data.csv")
setwd("C:/Repos/Research/year1/PSYC121")
d_raw <- read_csv("data/Week_6/PSYC121_survey_data.csv")
# set up the data for Task 3
d <-
d_raw %>%
select("stroop_control" = Q23,
"stroop_compatible" = Q24,
"stroop_incompatible" = Q25) %>%
slice(3:n()) %>%
mutate(across(contains("stroop"), as.numeric)) %>%
drop_na() %>%
mutate(pID = 1:n()) %>%
pivot_longer(cols = contains("stroop"),
names_to = "condition",
names_prefix = "stroop_",
values_to = "time") %>%
mutate(time = round(time,2)) %>%
group_by(pID) %>%
mutate(avg_time = round(mean(time),2))
d_raw %>%
select("stroop_control" = Q23,
"stroop_compatible" = Q24,
"stroop_incompatible" = Q25)
d_raw %>%
select("stroop_control" = Q23,
"stroop_compatible" = Q24,
"stroop_incompatible" = Q25) %>%
slice(3:n()) %>%
mutate(across(contains("stroop"), as.numeric))
d_raw %>%
select("stroop_control" = Q23,
"stroop_compatible" = Q24,
"stroop_incompatible" = Q25) %>%
slice(3:n()) %>%
mutate(across(contains("stroop"), as.numeric)) %>%
drop_na()
d_raw %>%
select("stroop_control" = Q23,
"stroop_compatible" = Q24,
"stroop_incompatible" = Q25) %>%
slice(3:n()) %>%
mutate(across(contains("stroop"), as.numeric)) %>%
drop_na() %>%
mutate(pID = 1:n()) %>%
pivot_longer(cols = contains("stroop"),
names_to = "condition",
names_prefix = "stroop_",
values_to = "time")
# set up the data for Task 3
d <-
d_raw %>%
select("stroop_control" = Q23,
"stroop_compatible" = Q24,
"stroop_incompatible" = Q25) %>%
slice(3:n()) %>%
mutate(across(contains("stroop"), as.numeric)) %>%
drop_na() %>%
mutate(pID = 1:n()) %>%
pivot_longer(cols = contains("stroop"),
names_to = "condition",
names_prefix = "stroop_",
values_to = "time") %>%
mutate(time = round(time,2)) %>%
group_by(pID) %>%
mutate(avg_time = round(mean(time),2))
View(d)
write_csv(d, file = "data/Week_8/stroop_wk8.csv")
write_csv(d, file = "data/Week_8/stroop_wk8_2024.csv")
#| eval: false
#| include: false
d %>%
ggplot() +
geom_density(aes(x = time, fill = condition), alpha = .8) + # you need to EDIT this line
theme_dark()
#| eval: false
#| include: false
# distribution of times by condition
d %>%
ggplot() +
geom_histogram(aes(x = avg_time), fill = "pink", colour = "purple") +
theme_classic()
#| eval: false
#| include: false
# filter out the high values
d_f <- # create a new object (or overwrite)
d %>% # original data object
filter(avg_time < 12)
# draw a new
d_f %>%
ggplot() +
geom_histogram(aes(x = avg_time),
fill = "yellow",
colour = "black",
bins = 20) +
theme_minimal()
#| eval: false
#| include: false
# filter out the high values
d_f <- # create a new object (or overwrite)
d %>% # original data object
filter(avg_time < 10)
# draw a new
d_f %>%
ggplot() +
geom_histogram(aes(x = avg_time),
fill = "yellow",
colour = "black",
bins = 20) +
theme_minimal()
348/3
#| eval: false
#| include: false
library(tidyverse)
d_raw <- read_csv("data/Week_6/PSYC121_survey_data.csv")
setwd("D:/Repos/Research/year1/PSYC121")
#| eval: false
#| include: false
library(tidyverse)
d_raw <- read_csv("data/Week_6/PSYC121_survey_data.csv")
# set up the data for Task 3
d <-
d_raw %>%
select("stroop_control" = Q23,
"stroop_compatible" = Q24,
"stroop_incompatible" = Q25) %>%
slice(3:n()) %>%
mutate(across(contains("stroop"), as.numeric)) %>%
drop_na() %>%
mutate(pID = 1:n()) %>%
pivot_longer(cols = contains("stroop"),
names_to = "condition",
names_prefix = "stroop_",
values_to = "time") %>%
mutate(time = round(time,2)) %>%
group_by(pID) %>%
mutate(avg_time = round(mean(time),2))
write_csv(d, file = "data/Week_8/stroop_wk8_2024.csv")
#| eval: false
# distribution of times by condition
your_data_object %>%
ggplot() +
geom_density(aes(x = missing_column_name_A, fill = missing_column_name_B), alpha = .8) + # you need to EDIT this for Q4
theme_dark()
#| eval: false
#| include: false
d %>%
ggplot() +
geom_density(aes(x = time, fill = condition), alpha = .8) + # you need to EDIT this line
theme_dark()
#| eval: false
#| include: false
# distribution of times by condition
d %>%
ggplot() +
geom_histogram(aes(x = avg_time), fill = "pink", colour = "purple") +
theme_classic()
#| eval: false
#| include: false
# filter out the high values
d_f <- # create a new object (or overwrite)
d %>% # original data object
filter(avg_time < 10)
# draw a new
d_f %>%
ggplot() +
geom_histogram(aes(x = avg_time),
fill = "yellow",
colour = "black",
bins = 20) +
theme_minimal()
#| eval: false
#| include: false
d_f %>%
group_by(condition) %>% # you need to EDIT this for Q1
summarise(stroop_mean = mean(time)) # you need to EDIT this for Q1
#| eval: false
#| include: false
# use filter to select two levels of the IV - Q3-5
stroop_compatible <-
d_f %>% # Edit this for the name of YOUR data object
filter(condition == "compatible")
# use filter to select two levels of the IV - Q3-5
stroop_control <-
d_f %>% # Edit this for the name of YOUR data object
filter(condition == "control")
# use filter to select two levels of the IV - Q3-5
stroop_incompatible <-
d_f %>% # Edit this for the name of YOUR data object
filter(condition == "incompatible")
# run the t-test comparing the means of these two levels
t.test(x = stroop_compatible$time, y = stroop_control$time, paired = TRUE)
t.test(x = stroop_incompatible$time, y = stroop_control$time, paired = TRUE)
t.test(x = stroop_compatible$time, y = stroop_incompatible$time, paired = TRUE)
#| eval: false
#| include: false
stroop_summary <-
d_f %>%
group_by(condition) %>% # you need to EDIT this for Q2
summarise(stroop_mean = mean(time),
stroop_SE = sd(time)/sqrt(n())) # you need to EDIT this for Q1
stroop_summary
#| eval: false
#| include: false
# let's first plot the means
stroop_summary %>%
ggplot(aes(x = condition, y = stroop_mean)) + # map variables to x and y for Q5
geom_point(size = 5) +
geom_errorbar(aes(ymin = stroop_mean - stroop_SE, # edit this for Q5
ymax = stroop_mean + stroop_SE), # edit this for Q5
width = .2)
#| eval: false
#| include: false
# let's first plot the means
stroop_summary %>%
ggplot(aes(x = condition, y = stroop_mean)) + # map variables to x and y for Q5
geom_col(size = 5) +
geom_errorbar(aes(ymin = stroop_mean - stroop_SE, # edit this for Q5
ymax = stroop_mean + stroop_SE), # edit this for Q5
width = .2)
setwd("D:/Repos/Research/year1/PSYC121")
#| eval: false
#| include: false
# filter out the high values
d_f <- # create a new object (or overwrite)
d %>% # original data object
filter(avg_time < 10)
#| eval: false
#| include: false
library(tidyverse)
d_raw <- read_csv("data/Week_6/PSYC121_survey_data.csv")
# set up the data for Task 3
d <-
d_raw %>%
select("stroop_control" = Q23,
"stroop_compatible" = Q24,
"stroop_incompatible" = Q25) %>%
slice(3:n()) %>%
mutate(across(contains("stroop"), as.numeric)) %>%
drop_na() %>%
mutate(pID = 1:n()) %>%
pivot_longer(cols = contains("stroop"),
names_to = "condition",
names_prefix = "stroop_",
values_to = "time") %>%
mutate(time = round(time,2)) %>%
group_by(pID) %>%
mutate(avg_time = round(mean(time),2))
write_csv(d, file = "data/Week_8/stroop_wk8_2024.csv")
#| eval: false
#| include: false
# filter out the high values
d_f <- # create a new object (or overwrite)
d %>% # original data object
filter(avg_time < 10)
# draw a new
d_f %>%
ggplot() +
geom_histogram(aes(x = avg_time),
fill = "yellow",
colour = "black",
bins = 20) +
theme_minimal()
#| eval: false
#| include: false
d_f %>%
group_by(condition) %>% # you need to EDIT this for Q1
summarise(stroop_mean = mean(time)) # you need to EDIT this for Q1
